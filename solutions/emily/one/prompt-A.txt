You are going to analyze the sudoku you've just been given.
The analysis will come down to one thing, finding the candidate elements for each unfilled square.
To do this, examine the nine rows, the nine columns, and the nine blocks, and find the elements missing from each set.
Then, for each unfilled square (squares with a '0'), examine the elements missing from the row, column, and 3-by-3 block associated with that square, combine them into a set of common candidates, and check to see whether or not there is Exactly one candidate in that set. Everything else follows from that.



# Board State
Trying to play without vision is difficult, so I want you to follow a very specific format.
I want you to print out the current board state using the _exact_ format shown below (replace the example with the current sudoku).
We are also finding the missing elements of each set. So we are taking the current row, column, or block, and calculating the set-wise difference between that row, column, or block, and the digits 1-9 shown in all_digits.
Each block and its missing elements will (between them) exactly cover the digits from 1 to 9 with no duplicates, and with each number appearing exactly once.
## Rows
all_digits = [1,2,3,4,5,6,7,8,9]

Print all nine rows and row_missing_elements using the format:
row: [row], row_missing_elements: all_digits.difference([row]) = [row_missing_elements]

Examples:
first_row: [1,0,3,4,5,6,0,0,9], first_row_missing_elements: all_digits.difference([1,0,3,4,5,6,0,0,9]) = [2,7,8]
second_row: [4,5,6,7,8,9,1,2,3], second_row_missing_elements: all_digits.difference([4,5,6,7,8,9,1,2,3]) = []
third_row: [7,8,0,1,2,3,4,5,6], third_row_missing_elements: all_digits.difference([7,8,0,1,2,3,4,5,6]) = [9]
fourth_row: [2,3,4,5,6,7,8,0,1], fourth_row_missing_elements: all_digits.difference([2,3,4,5,6,7,8,0,1]) = [9]
fifth_row: [5,6,7,8,9,1,2,3,4], fifth_row_missing_elements: all_digits.difference([5,6,7,8,9,1,2,3,4]) = []
sixth_row: [8,9,1,2,0,4,5,6,7], sixth_row_missing_elements: all_digits.difference([8,9,1,2,0,4,5,6,7]) = [3]
seventh_row: [3,4,5,6,7,8,9,1,2], seventh_row_missing_elements: all_digits.difference([3,4,5,6,7,8,9,1,2]) = []
eighth_row: [6,0,8,9,1,2,3,0,5], eighth_row_missing_elements: all_digits.difference([6,0,8,9,1,2,3,0,5]) = [4,7]
ninth_row: [9,0,2,0,4,5,0,7,8], ninth_row_missing_elements: all_digits.difference([9,0,2,0,4,5,0,7,8]) = [1,3,6]


## Columns
all_digits = [1,2,3,4,5,6,7,8,9]

Format:
column: [column], column_missing_elements: [all_digits].difference([column]) = [column_missing_elements]

Examples:
first_column: [1,4,7,2,5,8,3,6,9] first_column_missing_elements: all_digits.difference([1,4,7,2,5,8,3,6,9]) = []
second_column: [0,5,8,3,6,9,4,0,0] second_column_missing_elements: all_digits.difference([0,5,8,3,6,9,4,0,0]) = [1,2,7]
third_column: [3,6,0,4,7,1,5,8,2] third_column_missing_elements: all_digits.difference([3,6,0,4,7,1,5,8,2]) = [9]
fourth_column: 

## Blocks
all_digits = [1,2,3,4,5,6,7,8,9]

Format:
block: (rows: rows in the block; columns: columns in the block):
[block]
block_missing_elements: all_digits.difference([block]) = [block_missing_elements]

Examples:
top_left_block: (rows: first_row, second_row, third_row; columns: first_column, second_column, third_column)
[[1,0,3],
[4,5,6],
[7,8,0]]
top_left_block_missing_elements: all_digits.difference([1,0,3,4,5,6,7,8,0]) = [2,9]

top_middle_block: (rows: first_row, second_row, third_row; columns: fourth_column, fifth_column, sixth_column)
[[4,5,6],
[7,8,9],
[1,2,3]]
top_middle_block_missing_elements: all_digits.difference([4,5,6,7,8,9,1,2,3]) = []

top_right_block: (rows: first_row, second_row, third_row; columns: seventh_column, eighth_column, ninth_column)
[[0,0,9],
[1,2,3],
[4,5,6]]
top_right_block_missing_elements: all_digits.difference([0,0,9,1,2,3,4,5,6]) = [7,8]

middle_left_block: (rows: fourth_row, fifth_row, sixth_row; columns: first_column, second_column, third_column)



# Finding and counting the zero elements
## The positions of the zeroes
For each row we do the following calculations:
row_unfilled_indices: [row].index(0) = [index of every '0' element in the row]
row_unfilled_positions: row_unfilled_indices.increment(1) = [each index incremented by 1]
row_unfilled_columns: the word versions of the positions of the zeroes

Use the following format:
first_row_unfilled_indices: [1,0,3,4,5,6,0,0,9].index(0) = [1,6,7]
first_row_unfilled_positions: first_row_unfilled_indices.increment(1) = [2,7,8]
first_row_unfilled_columns: second, seventh, eighth


## Calculate the number of unfilled squares
A simple one line calculation By Hand to get the total number of unfilled squares:
total_unfilled_squares = 3 + 0 + 1 + 1 + 0 + 1 + 0 + 2 + 3 = 11

Then we cap the number of squares to list:
number_of_squares_to_list = min(total_unfilled_squares, 17) = 11



# Candidate analysis
## Common candidates in each unfilled square
Go through each unfilled square and list the missing elements for the row, column, and block containing that square (use the row and column to get the correct block).
Calculate the elements that are in Both the row, AND the column. Make sure to find ALL of them.
Then calculate the elements that are in Both STEP_A (the previous result), AND the block. Make sure to find ALL of them.

Make sure to ONLY do unfilled squares, which we calculated in the section 'The positions of the zeroes'.
For each unfilled square we examine, we do the following calculations (example below):
STEP_A = row_missing_elements.intersection(column_missing_elements) = [elements in both row_missing_elements AND column_missing_elements]
STEP_B = STEP_A.intersection(block_missing_elements) = [elements in both STEP_A AND block_missing_elements]
common_missing_elements: [STEP_B]
FOUND: square(row, column) (print this line if there is Only one common_missing_element in that square, otherwise leave this line blank and keep going)

Example:
### first_row_unfilled_columns: second, seventh, eighth
#### 1 of {number_of_squares_to_list}
(first_row, second_column):
Using first_row_missing_elements, second_column_missing_elements, and top_left_block_missing_elements (do not list the elements here, just the set names)
STEP_A: [2,7,8].intersection([1,2,7]) = [2,7]
STEP_B: [2,7].intersection([2,9]) = [2]
common_missing_elements: [2]
FOUND: square(first_row, second_column) (If the square has one only one common_missing_element, also print "FOUND ONE: square(row, column)" like this, then keep going)

When we have done as many unfilled squares as specified by number_of_squares_to_list, we stop listing squares and print:
"Finished printing 17 out of 17 squares" (using appropriate numbers)

# Outputting the found squares
## Collating Results
For Every unfilled square that had ONLY one common element (marked with "FOUND: square(row, column)"), we list them below so they are all in one place.

FOUND: square(first_row, second_column)

Make sure to list ALL of them

If there where none, instead print "There were no unfilled squares with only one common_missing_element"


## Unbiased Results
Finally, for every square in the results, we need to list them in the following format:
square(first_row, second_column)
first_row_missing_elements = [2,7,8]
second_column_missing_elements = [1,2,7]
top_left_block_missing_elements = [2,7]

Note that neither of the output sections lists the common_missing_element found in that square. This is to allow unbiased verification of the results.

Make sure to list all of them

If there where none, instead print "There are no candidate squares"



# Final Notes
You MUST finish ALL required sections IN FULL.

Use these instructions to analyze the current sudoku from the previous message.

Begin
